<!DOCTYPE html>
<html lang='en'>
<head> 
<meta charset='UTF-8'> 
<title>CamxmctlDev</title> 
<meta name='viewport' content='width=device-width, initial-scale=1'> 
  <style>
    * {
      margin: 0;
      padding: 0;
    }
    body {
      padding: 0;
      margin: 0;
      font-family: Arial, Helvetica, sans-serif;
      font-size: 1rem;
      line-height: 1;
      color: #606c71;
      background-color: #159957;
      background-image: linear-gradient(120deg, #155799, #159957);
      margin-left:0.5% ;
      margin-right:0.5% ;
      width: device-width ;
    }
    label {
      color: black;
    }
    .page-header {
      color: #fff;
      text-align: center;
      margin-top: 0rem;
      margin-bottom: 0rem;
      font-weight: normal;
    }
    .page-header h3 {
      height: 2rem;
      padding: 0;
      margin: 1rem;
      border: 0;
    }
    h3 {
      margin-left: 10rem;
    }
    .header-right{
      float: right;
      color: white;
    }
    .header-center {
      text-align: center;
      color: white;
      margin-top: 1rem;
      margin-bottom: 1rem;
    }
    .border {
      border-width: 1rem;
      border-color: white;
      border-style: solid;
    }
    .sidenav {
      height: 100%;
      width: 10rem;
      position: fixed;
      z-index: 1;
      top: 0;
      left: 0;
      background-color: lightgrey;
      overflow-x: hidden;
      overflow: auto;
    }
    .sidenav a, .dropbtn {
      padding: 0.5rem 0rem 0.5em 1rem;
      text-decoration: none;
      font-size: 1rem;
      display: block;
      border: none;
      background: none;
      width:90%;
      text-align: left;
      cursor: pointer;
      outline: none;
      color: black;
      background-color: lightgray;
    }
    .sidenav a:hover, .dropbtn:hover {
      background-color: #555;
      color: white;
    }
    .sidenav .closebtn {
      color: black;
      top: 0;
      margin-left: 80%;
      width: 1rem;
      font-size: 1rem;
      background-color: lightgray;
    }
    .sidenav .closebtn:hover {
      background-color: lightgray;
      color: white;
    }
    .menubtn {
      top: 0;
      width: 1rem;
      margin-left: 0.5rem;
      margin-bottom: 0.25rem;
      font-size: 1.5rem;
      color:black;
      transform: rotate(90deg);
      -webkit-transform: rotate(90deg);
      background-color: transparent;
      border-color: transparent;
    }
    .menubtn:hover {
      color: white;
    }
    .dropdown-content {
      display: none;
      background-color:lightgray;
      padding-left: 1rem;
    }
    .actionbtn {
      padding: 0.25rem;
      text-decoration: none;
      font-size: 0.5rem;
      display: block;
      border: none;
      background: none;
      width: 3rem;
      text-align: center;
      cursor: pointer;
      outline: none;
      color: black;
      background-color: lightgray;
    }
    .cls_config {
      background-color: #000000;
      color: #fff;
      text-align: center;
      margin-top: 0rem;
      margin-bottom: 0rem;
      font-weight: normal;
      font-size: 0.90rem;
    }
    .cls_config table {
      display: table;
      border-spacing: 1rem;
      margin: auto;
    }
    .cls_config label {
      padding: 0rem;
      text-align: right;
      width: 10rem;
      height: 2.5rem;
    }
    .cls_config textarea {
      margin: auto;
      text-align: center;
      width: 15.5rem;
      height: 2.5rem;
    }
    .cls_button {
      width: 10rem;
      height: 2rem;
      padding: 0rem;
    }
    .cls_drop {
      padding: 0rem;
      text-align: right;
      width: 10rem;
      height: 2.25rem;
    }
    .cls_ip {
      padding: 0rem;
      width: 8em;
      text-align: right;
    }
    .cls_text {
      padding: 0rem;
      width: 10em;
      text-align: right;
    }
    .cls_text_nbr {
      padding: 0rem;
      width: 10rem;
      text-align: right;
    }
    .cls_text_wide {
      padding: 0rem;
      height: 3rem;
      width: 20rem;
      text-align: right;
    }
    .arrow {
      border: solid black;
      border-width: 0 1rem 1rem 0;
      border: double black;
      border-width: 0 0.75rem 0.75rem 0;
      display: inline-block;
      padding: 1rem;
      font-size: 0.5rem;
    }
    a:link {
      color: white;
      background-color: transparent;
      text-decoration: none;
    }
    a:visited {
      color: black;
      background-color: transparent;
      text-decoration: none;
    }
    .cmdbtn {
      width:3.5rem;
      text-align:center;
    }
    .cmdbtn2 {
      width:7rem;
      text-align:center;
    }  
  </style>
</head>

<body class='body' onload='initform()'>
  
  <div id='divmain' style='margin-left:10rem' >
    <div id='div_config'>
      <br><br>      
      <div id=div_status>      
        <table style='color:white; width:80%;' >
          <tr>
            <td align='center'>status</td>            
          </tr>
        </table>
      </div>  
      <table style='color:white; width:80%;' >
        <colgroup width='20%'></colgroup>
        <colgroup width='20%'></colgroup>
        <colgroup width='20%'></colgroup>
        <colgroup width='20%'></colgroup>
        <tr>
          <td align='left'><b>IP</b></td>
          <td align='left'><input id=ip  type="text"></td>
          <td align='left'><b>Port</b></td>
          <td align='left'><input id=port  type="text" value=34567></td>
        </tr>        
        <tr>
          <td align='left'><b>User</b></td>
          <td align='left'><input id=user  type="text" value='admin'></td>
          <td align='left'><b>Password</b></td>
          <td align='left'><input id=password  type="text"></td>
        </tr>
        <tr><td><br></td></tr>
        <tr>
          <td>
          <label for='ptz_down' style='text-align:center;' >Pan/Tilt</label>
          <br>          
          <input type='button' id=ptz_up   value='Up'   class='cmdbtn' onclick='cmd_ptz("DirectionUp")'>
          <input type='button' id=ptz_down value='Down' class='cmdbtn' onclick='cmd_ptz("DirectionDown")'>          
          <br>
          <input type='button' id=ptz_up   value='Left' class='cmdbtn' onclick='cmd_ptz("DirectionLeft")'>          
          <input type='button' id=ptz_up   value='Right' class='cmdbtn' onclick='cmd_ptz("DirectionRight")'>
          </td>          
          <td>
          <label for='ptz_zoomin' style='text-align:center;' >Zoom</label>
          <br><input type='button' id=ptz_zoomin value='In'   class='cmdbtn' onclick='cmd_ptz("ZoomTile")'>
          <input type='button' id=ptz_zoomout value='Out' class='cmdbtn' onclick='cmd_ptz("ZoomWide")'>          
          <br>
          <label for='ptz_dur' style='text-align:center;' >PTZ Duration(Seconds)</label>
          <br>          
          <input type='text' style='text-align:right;' id='ptz_dur' value='0.5'></td>
          </td>          
          <td>
            <input type='button' id=reboot    value='Reboot' class='cmdbtn' onclick='cmd_reboot()'>
            <input type='button' id=configget value='Config' class='cmdbtn' onclick='get_config("current")'>
            <br>
            <input type='button' id=users  value='Users' class='cmdbtn' onclick='get_users()'>
            <input type='button' id=groups value='Groups' class='cmdbtn' onclick='get_groups()'>
          </td>
          <td>
            <input type='button' id=time value='Set Time' class='cmdbtn2' onclick='cmd_time()'>
            <br>
            <input type='button' id=default value='Defaults' class='cmdbtn2' onclick='get_config("default")'>
            <br>
          </td>
          <td>
          </td>        
        </tr>
        <tr><td><br></td></tr>
        <tr><td><br></td></tr>
        <tr>                    
          <td><br></td>
          <td><br></td>          
        </tr>
        <tr>
          <td id="td00"></td>          
          <td id="td01"></td>
          <td id="td02"></td>
          <td id="td03"></td>          
        </tr>
        <tr>
          <td id= "td10"></td>
          <td id= "td11"></td>
          <td id= "td12"></td>
          <td id= "td13"></td>
        </tr>                        
        <tr>
          <td id= "td20"></td>
          <td id= "td21"></td>
          <td id= "td22"></td>
          <td id= "td23"></td>
        </tr>                        
      </table>

      <div id="div_tbl">
      </div>
      
  </div>

  <script>
    var pData, pUsers, pGroups;
    var pStatus, pHostFull;
    var html_opt, html_tbl;
    var cnt_opt, cnt_tbl;
    var fullkey, token;
    
    var rand = function() {
      return Math.random().toString(36).substr(2); // remove `0.`
    };    
    function initform() {
      pHostFull = '//' + window.location.hostname;
      pHostFull = pHostFull + ':' + window.location.port;                       
    }
    function status_update(msg) {
      var html_status;
      html_status  = "<table style='color:white; width:80%;' >";
      html_status += "<tr><td align='center'>";
      html_status += msg;
      html_status += "</td></tr></table>\n";
      document.getElementById('div_status').innerHTML = html_status;
    }
    function cmd_reboot() {
      var formData = new FormData();
      var request = new XMLHttpRequest();
      status_update ("connecting");
      token = rand() + rand();
      
      request.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          status_update("ready");
        }
      };
      formData.append('command', 'reboot');
      formData.append('user', document.getElementById("user").value);
      formData.append('password', document.getElementById("password").value);
      formData.append('ip', document.getElementById("ip").value);
      formData.append('port', document.getElementById("port").value);
    	formData.append('token', token); 
    	
      request.open('POST', pHostFull);
      request.send(formData);
    }
    function cmd_time() {
      var formData = new FormData();
      var request = new XMLHttpRequest();

      status_update ("connecting");
      token = rand() + rand();
      
      request.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          status_update("ready");
        }
      };

      formData.append('command', 'settime');
      formData.append('user', document.getElementById("user").value);
      formData.append('password', document.getElementById("password").value);
      formData.append('ip', document.getElementById("ip").value);
      formData.append('port', document.getElementById("port").value);
      formData.append('token', token);

      request.open('POST', pHostFull);
      request.send(formData);
    }
    function cmd_ptz(ptz_action) {
      var formData = new FormData();
      var request = new XMLHttpRequest();

      status_update ("connecting");
      token = rand() + rand();
      
      request.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          status_update("ready");
        }
      };
      formData.append('command', 'ptz');
      formData.append('user', document.getElementById("user").value);
      formData.append('password', document.getElementById("password").value);
      formData.append('ip', document.getElementById("ip").value);
      formData.append('port', document.getElementById("port").value);
      formData.append('ptz_action', 'ptz_action');
      formData.append('ptz_duration', document.getElementById("ptz_dur").value);
      formData.append('token', token);
     
      request.open('POST', pHostFull);
      request.send(formData);
    }
    function get_config(cfgtype) {
      var frmdata = new FormData();
      var request = new XMLHttpRequest();
      var xmlhttp = new XMLHttpRequest();

      status_update ("connecting");
      token = rand() + rand();

      xmlhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          pData = JSON.parse(this.responseText);
          load_config();
        }
      };
      request.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          if(cfgtype == "current") {
            xmlhttp.open('GET', pHostFull+'/json/all?token='+token);
          } else {
            xmlhttp.open('GET', pHostFull+'/json/default?token='+token);
          }  
          xmlhttp.send();
          status_update("Getting configuration");
        }
      };
      frmdata.append('command', 'login');
      frmdata.append('user', document.getElementById("user").value);
      frmdata.append('password', document.getElementById("password").value);
      frmdata.append('ip', document.getElementById("ip").value);
      frmdata.append('port', document.getElementById("port").value);
      frmdata.append('token',token);

      request.open('POST', pHostFull);
      request.send(frmdata);
    }
    function get_users() {
      var frmdata = new FormData();
      var request = new XMLHttpRequest();
      var xmlhttp = new XMLHttpRequest();

      status_update ("connecting");
      
      xmlhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          pUsers = JSON.parse(this.responseText);
          load_users();
          frmdata.set('command','logout');          
          request.open('POST', pHostFull);
          request.send(frmdata);
        }
      };
      request.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          if (frmdata.get('command') == 'login') {
            status_update("Logged in");       
            xmlhttp.open('GET', pHostFull+'/json/users');
            xmlhttp.send();
            status_update("Getting users");
          } else {
            status_update("ready");
          }
        }
      };
      frmdata.append('command', 'login');
      frmdata.append('user', document.getElementById("user").value);
      frmdata.append('password', document.getElementById("password").value);
      frmdata.append('ip', document.getElementById("ip").value);
      frmdata.append('port', document.getElementById("port").value);

      request.open('POST', pHostFull);
      request.send(frmdata);
    }
    function get_groups() {
      var frmdata = new FormData();
      var request = new XMLHttpRequest();
      var xmlhttp = new XMLHttpRequest();

      status_update ("connecting");
      
      xmlhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          pGroups = JSON.parse(this.responseText);
          load_groups();
          frmdata.set('command','logout');          
          request.open('POST', pHostFull);
          request.send(frmdata);
        }
      };
      request.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          if (frmdata.get('command') == 'login') {
            status_update("Logged in");       
            xmlhttp.open('GET', pHostFull+'/json/users');
            xmlhttp.send();
            status_update("Getting groups");
          } else {
            status_update("ready");
          }
        }
      };
      frmdata.append('command', 'login');
      frmdata.append('user', document.getElementById("user").value);
      frmdata.append('password', document.getElementById("password").value);
      frmdata.append('ip', document.getElementById("ip").value);
      frmdata.append('port', document.getElementById("port").value);

      request.open('POST', pHostFull);
      request.send(frmdata);
    }
    function config_ip(idnm) {
      var ipstr, ipnew;
      pos = new Array(-1,-1,-1,-1);
      ipval = new Array(-1,-1,-1,-1);
      iphx = new Array("","","","");
      
      ipstr = document.getElementById(idnm+"1").value;

      for (indx=0; indx < 4; indx++) {
        pos[indx]=ipstr.indexOf(".");
        if (indx < 3) {
          if (pos[indx] < 0) {
            alert("Invalid IP");
            return;          
          }        
          ipval[indx] = ipstr.substr(0, pos[indx]);
        } else {
          ipval[indx] = ipstr;
        }
        if (ipval[indx] > 255){
          alert("Invalid IP");
          return;          
        }        
        ipstr = ipstr.substr(pos[indx]+1);
        iphx[indx] = ("00" + parseInt(ipval[indx]).toString(16)).toUpperCase();      
        iphx[indx] = iphx[indx].substr(iphx[indx].length -2);
      }
      ipstr = document.getElementById(idnm+"1").value;
      ipnew = "0x"+iphx[3]+iphx[2]+iphx[1]+iphx[0];
      if (document.getElementById(idnm).value != ipnew) {
        document.getElementById(idnm).value = ipnew;
        set_reboot = true;        
      }
      
    }
    function config_set_obj(jObj, indx) {
      var tst, new_val, net_txt, new_bool;      

      if ((indx > 0) &&  (indx < 9)) {
        cfg = document.getElementById("cfgdrop"+indx).value;
      } else {
        cfg =""; 
      }
      if (cfg == "") {
        Object.entries(jObj).forEach((entry) => {
          const [key_nm, key_val] = entry;
          tst = typeof key_val;
          if (tst != "object") {      
            //console.log("chk: "+key_nm);          
            if (tst == "boolean") {
              if (document.getElementById(key_nm).value == "true"){
                new_bool = true;
              } else {
                new_bool = false;
              }
              if (new_val != key_val) {              
                jObj[key_nm] = new_bool;
                console.log("change: "+fullkey+" key"+key_nm+" >"+key_val+"<>"+new_bool+"<");
              }  
            } else if (tst == "number") {
              new_val = Number(document.getElementById(key_nm).value);
              if (new_val != key_val) {              
                jObj[key_nm] = Number(new_val);
                console.log("change: "+fullkey+" key"+key_nm+" >"+key_val+"<>"+new_val+"<");
              }         
            } else {
              //console.log("var type: "+tst);
              new_txt = document.getElementById(key_nm).value;          
              if (new_txt != key_val) {              
                jObj[key_nm] = new_txt;
                console.log("change: "+fullkey+" key"+key_nm+" >"+key_val+"<>"+new_txt+"<");
              }
            }
          }
        })      
      } else {
        Object.entries(jObj).forEach((entry) => {
          const [key_nm, key_val] = entry;
          tst = typeof key_val;
          if ((tst == "object") && (key_nm == cfg)) {
            //console.log("obj: "+key_nm);
            jObj = jObj[cfg];
            config_set_obj(jObj, indx+1);          
          }
        })
      }
    }
    function config_set() {
      var formData = new FormData();
      var request = new XMLHttpRequest();
      var xmlhttp = new XMLHttpRequest();
      var pStatus, key_val, indx;
      var jNew, new_val, chk_arr, cfg;
      
      status_update ("connecting");
      
      xmlhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          pStatus = JSON.parse(this.responseText);
          status_update(pStatus['status']);          
        }
      };
      request.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          xmlhttp.open('GET', pHostFull+'/json/status');
          xmlhttp.send();
        }
      };
      
      cfg = document.getElementById("cfgdrop0").value;
      jNew = pData[cfg][cfg];
      fullkey = cfg;
            
      chk_arr = -1      
      for (indx=1; indx < 9; indx++) {      
        cfg = document.getElementById("cfgdrop"+indx).value;          
        if ((cfg != "") && (chk_arr == -1)) {
          jNew = jNew[cfg];
          fullkey = fullkey + "." + cfg;
          if (Array.isArray(jNew)) {
            chk_arr = indx;
          }
        }
      }
      config_set_obj(jNew, chk_arr+1);
      key_val = JSON.stringify(jNew);

      //console.log("key val: "+key_val);
     
      formData.append('command', 'configset');      
      formData.append('user', document.getElementById("user").value);
      formData.append('password', document.getElementById("password").value);
      formData.append('ip', document.getElementById("ip").value);
      formData.append('port', document.getElementById("port").value);
      formData.append('key_nm', fullkey);
      formData.append('key_val',key_val);
      // console.log( key_val );
      request.open('POST', pHostFull);
      request.send(formData);
    }
    function opt_clear(optobj) {
      var indx, indx_max;      
      indx_max = optobj.options.length - 1;
      for(indx = indx_max; indx >= 0; indx--) {
        optobj.remove(indx);
      }
    }
    function load_config() {
      var indx;      
      html_opt = "";
      html_opt += "<select class='cls_drop'";
      html_opt += " onchange='dropchange_cfg(this, 0)'";
      html_opt += " id='cfgdrop0'>";
      html_opt += " <option value='SystemInfo'>SystemInfo</option>";
      html_opt += " <option value='Alarm'>Alarm</option>";
      html_opt += " <option value='AVEnc'>AVEnc</option>";
      html_opt += " <option value='Camera'>Camera</option>";
      html_opt += " <option value='Detect'>Detect</option>";
      html_opt += " <option value='fVideo'>fVideo</option>";
      html_opt += " <option value='General'>General</option>";
      html_opt += " <option value='IPAdaptive'>IPAdaptive</option>";
      html_opt += " <option value='NetWork'>NetWork</option>";
      html_opt += " <option value='Storage'>Storage</option>";
      html_opt += " <option value='StorageGlobal'>StorageGlobal</option>";
      html_opt += " <option value='System'>System</option>";
      html_opt += " <option value='Uart'>Uart</option>";
      html_opt += "</select>";  
      document.getElementById('td00').innerHTML = html_opt;
      document.getElementById('cfgdrop0').selectedIndex = "-1";
      document.getElementById('div_tbl').innerHTML = "<table></table>";
      
      for (indx=1; indx <=8; indx++) {
        html_opt = "";
        html_opt += "<select class='cls_drop'";
        html_opt += " onchange='dropchange_cfg(this, "
        html_opt += indx+")' id='cfgdrop"+indx+"'>";
        if (indx <= 4) {
          document.getElementById('td1'+(indx-1)).innerHTML = html_opt;
        } else if (indx <= 8) {
          document.getElementById('td2'+(indx-5)).innerHTML = html_opt;
        }  
      }
    }
    function load_users() {
 
    }
    function load_groups() {
 
    }
    function tblopt_base() {
      document.getElementById('div_tbl').innerHTML = "<table></table>";
      html_tbl = "";
      html_tbl += "<table style='color:white; width:80%;'>";
      html_tbl += "<colgroup width='20%'></colgroup>";
      html_tbl += "<colgroup width='20%'></colgroup>";
      html_tbl += "<colgroup width='10%'></colgroup>";
      html_tbl += "<colgroup width='10%'></colgroup>";
      html_tbl += "<colgroup width='5%'></colgroup>";
      html_tbl += "<colgroup width='5%'></colgroup>";
      html_tbl += "<colgroup width='10%'></colgroup>";
      html_tbl += "<tr><td><br></td><td></td><td></td><td></td></tr>";
      html_tbl += "<tr>";
      html_tbl += " <td><input type='button'";
      html_tbl += "   value='Set Config' ";
      html_tbl += "   onclick=config_set()>";
	    html_tbl += " </td>";
      html_tbl += "</tr>";
      html_tbl += "<tr><br><td></td><td></td><td></td><td></td></tr>";
      html_tbl += "<tr><td> Key </td><td> Value </td><td></td></tr>"; 
      html_tbl += "<tr><br><td></td><td></td><td></td><td></td></tr>";
	       
      cnt_opt = 0;
      cnt_tbl = 0;
    }
    function tblopt_bool(key_nm, key_val) {
      html_tbl += "<tr>";
	    html_tbl += "<td>"+ key_nm +"</td>"; 
      html_tbl += "<td>";
      html_tbl += " <select class='cls_drop' ";
      html_tbl += " id='" + key_nm  + "'> ";
      if (key_val ) {
  	    html_tbl += " <option value='true' selected >true</option>";
        html_tbl += " <option value='false'>false</option>";
	    } else {
  	    html_tbl += " <option value='true'>true</option>";
        html_tbl += " <option value='false' selected>false</option>";
	    }
	    html_tbl += " </select>";
	    html_tbl += "</td>";
      html_tbl += "<td></td></tr>"; 	        
	    cnt_tbl++;
    }
    function tblopt_ip(key_nm, key_val) {
      var tmp;
      html_tbl += "<tr>";
      html_tbl += "<td>"+ key_nm +"</td>"; 
      html_tbl += "<td><input type='text' "; 
      html_tbl += " style='text-align:right;'";
      html_tbl += " name='"+key_nm+"'";
      html_tbl += " id='" + key_nm  + "' ";          
      html_tbl += " value='"+key_val+"' disabled></td>";
      
      html_tbl += "<td><input type='text' "; 
      html_tbl += " class='cls_ip'";
      html_tbl += " name='"+key_nm+"1'";
      html_tbl += " id='" + key_nm  + "1' ";          
      html_tbl += " value='"
      if (key_val != ""){
        html_tbl += parseInt(key_val.substr(8,2),16)+".";
        html_tbl += parseInt(key_val.substr(6,2),16)+".";
        html_tbl += parseInt(key_val.substr(4,2),16)+".";
        html_tbl += parseInt(key_val.substr(2,2),16);
      }   
      html_tbl += "'</td>";
      html_tbl += " <td><input type='button'";
      html_tbl += "   value='Set IP' ";
      html_tbl += "   onclick=config_ip('";
      html_tbl += key_nm  + "')> "   
	    html_tbl += " </td>";

      html_tbl += "</tr>"; 	        
	    cnt_tbl++; 
    }
    function tblopt_other(key_nm, key_val) {
      html_tbl += "<tr>";
      html_tbl += "<td>"+ key_nm +"</td>"; 
      html_tbl += "<td><input type='text' "; 
      html_tbl += " style='text-align:right;'";
      html_tbl += " name='"+key_nm+"'";
      html_tbl += " id='" + key_nm  + "' ";          
      html_tbl += " value='"+key_val+"'></td>";
      html_tbl += "<td></td></tr>"; 	        
	    cnt_tbl++; 
    }
    function tblopt_build(jData) {
      if (typeof jData == "undefined") {
        return;
      }      
      Object.entries(jData).forEach((entry) => {
        const [key_nm, key_val] = entry;        
        tst = typeof key_val;        
        if (tst == "object") {
          html_opt += "<option value='"+key_nm+"'>"+key_nm+"</option>";
          cnt_opt++;        
        } else if (tst == "boolean"){            
          tblopt_bool(key_nm, key_val);
        } else {            
          if ((key_nm == "GateWay")     ||  (key_nm == "HostIP") || 
              (key_nm == "Submask")     ||  (key_nm == "DnsServer1") ||  
              (key_nm == "DnsServer2")  ||  (key_nm == "SpareAddress") ||
              (key_nm == "Address")) {
            tblopt_ip(key_nm, key_val);
          } else {
            tblopt_other(key_nm, key_val);
          }
        }
        
      });
    }
    function dropchange_cfg(cfgobj, nbr) {
      var jData, cfgitm, indx, dropid; 
             
      for (indx=0; indx <9; indx++) {
        dropid = "cfgdrop"+indx;
        if (indx == 0) {
          cfgitm= document.getElementById(dropid).value;
          jData = pData[cfgitm][cfgitm];
        } else if (indx <= nbr) {
          cfgitm= document.getElementById(dropid).value;
          jData = jData[cfgitm];                
        } else {
          opt_clear(document.getElementById(dropid));
        }
      }
    
      indx = nbr+1;
      dropid = "cfgdrop"+indx;
      
      tblopt_base();
      html_opt = "";
      html_opt += " <select class='cls_drop' ";
      html_opt += " onchange='dropchange_cfg(this,"
      html_opt += indx + ")'";
      html_opt += " id='"+dropid+"'>";
 
      tblopt_build(jData);

      if (cnt_opt > 0) {
        html_opt  += "</select>";
        if (indx <= 4) {
          document.getElementById('td1'+(indx-1)).innerHTML = html_opt;
        } else if (indx <= 8) {
          document.getElementById('td2'+(indx-5)).innerHTML = html_opt;
        }  
        document.getElementById(dropid).selectedIndex = "-1";
      }
      if (cnt_tbl > 0) {
        html_tbl  += "</table>";
        document.getElementById('div_tbl').innerHTML = html_tbl;
      }  
    }

  </script>

</body>
</html>
